#! /bin/env python
# Import required libraries
import argparse
import math
import json
import re
# from git import Repo
import subprocess
from collections import defaultdict

# Define a function to parse command-line arguments
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--since', type=str, help='Start date in YYYY-MM-DD format')
    parser.add_argument('--authors', type=str, help='Path to authors file')
    parser.add_argument('projects', nargs='+', help='List of project directories')
    return parser.parse_args()

def run_git_log_command(repo_path, command, since_date):
    raw_command = ['git', '-C', repo_path, 'log']
    if since_date is not None:
        raw_command.append(f'--since={since_date}')
    completed_process = subprocess.run(raw_command+command, capture_output=True, text=True)
    if completed_process.returncode == 0:
        return completed_process.stdout
    else:
        raise RuntimeError(f"Git command failed with message: {completed_process.stderr}")

def extract_author_map(repos, since_date):
    git_authors_map = {}
    log_command = [r'--pretty=format:%ae %an',]
    for repo_path in repos:
        log_output = run_git_log_command(str(repo_path), log_command, since_date)
        if log_output == "": continue # skip the blank git log
        for line in log_output.splitlines():
            line_list = line.strip().split(' ')
            email, name = line_list[0], " ".join(line_list[1:])
            git_authors_map[email] = name
    return git_authors_map

def calculate_scores(repos, since_date):
    scores = defaultdict(int)
    log_command = ['--pretty=format:%ae %s', '--shortstat']
    for repo_path in repos:
        log_output = run_git_log_command(str(repo_path), log_command, since_date)
        if log_output == "": continue # skip the blank git log 
        # split by blank line
        for commit in log_output.split("\n\n"):
            lines = commit.strip().splitlines()
            # Several merge pull request commit without statistics
            # <email> <message subject>
            # # file changed, # insertion(+), # deletion(-)
            assert len(lines) >= 2, f"repo_path: {repo_path}, log_output: {repr(log_output)}"
            parts = lines[-2].split(" ")
            email, _ = parts[0], " ".join(parts[1:])

            parts = lines[-1].strip().split(", ")
            insertions = deletions = 0
            for part in parts:
                if "insertion" in part:
                    insertions = int(part.split()[0])
                elif "deletion" in part:
                    deletions = int(part.split()[0])
            scores[email] += 1 + math.ceil((insertions+deletions) / 100)
    
    return scores

# Define a function to parse the authors file
def parse_authors_file(file_path):
    is_email_appeared = {} # we mush check there is no same email in the whole file.
    authors_map = {}
    with open(file_path, 'r') as file:
        for lid, line in enumerate(file):
            parts = line.strip().split()
            name = []
            emailIdx = 0
            # deal with name
            for idx, part in enumerate(parts):
                matched = re.match(r"<(.+?)>",part)
                if matched:
                    emailIdx = idx
                    break
                name.append(part)
            name = " ".join(name)
            assert emailIdx > 0, "there must be at least one emails"

            #deal with email
            authors_map[(lid,name)] = []
            for part in parts[emailIdx:]:
                matched = re.match(r"<(.+?)>",part)
                assert matched
                email = matched.group(1)

                # check email has never appeared before.
                assert email not in is_email_appeared
                is_email_appeared[email] = 1

                authors_map[(lid,name)].append(email)
    return authors_map

# Define a function to rank and output data
def output_ranked_scores(scores, authors_map, same_authors):
    # merge the same contributors
    for (_, name), emails in same_authors.items():
        final_email = emails[0]
        for email in emails:
            authors_map[email] = name
            if email != final_email:
                scores[final_email] += scores[email]
                scores.pop(email,None)
    # blacklist
    scores.pop("action@github.com", None)

    ranked = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    output = []
    for rank, (email, score) in enumerate(ranked, start=1):
        output.append({'rank': rank, 'name': authors_map[email], 'score': score})
    return json.dumps(output, indent=3)

def main():
    args = parse_args()

    # check since format.
    if args.since is not None:
        assert re.match(r'^\d{4}-\d{2}-\d{2}$', args.since)

    authors_map = extract_author_map(args.projects, args.since)
    same_authors = parse_authors_file(args.authors) if args.authors else {}
    scores = calculate_scores(args.projects, args.since)
    print(output_ranked_scores(scores, authors_map, same_authors))

if __name__ == "__main__":
    main()
